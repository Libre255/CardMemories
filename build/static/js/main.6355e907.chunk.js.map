{"version":3,"sources":["gameplay/cards/reducer/cardsReducer.ts","gameplay/cards/reducer/cardsReducerFunctions.ts","service/cards/CardsService.ts","gameplay/smashBar/useSmashBarPower.ts","gameplay/cards/components/BackCard.tsx","gameplay/cards/components/FrontCards.tsx","gameplay/cards/components/Card.tsx","gameplay/cards/components/CardDeck.tsx","gameplay/cards/hooks/useCardGridPosition.ts","gameplay/endGame/EndGameInput.tsx","gameplay/smashBar/components/SmashBar.tsx","gameplay/smashBar/components/SmashButton.tsx","gameplay/smashBar/components/SmashBarContainer.tsx","gameplay/timer/Timer.tsx","gameplay/GamePlayBox.tsx","gameplay/cards/hooks/useCards.ts","gameplay/cards/hooks/useSelectedCards.ts","gameplay/timer/useTimer.ts","common/hooks/useUserInfo.ts","home/StartButton.tsx","home/GameMainComponent.tsx","home/HomePage.tsx","menu/Menu.tsx","service/ranking/RankingService.ts","ranking/components/PlayerBox.tsx","ranking/components/RankingList.tsx","ranking/hooks/useRankingList.ts","ranking/components/RankingPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["COMMANDS","initialState","cardDeck","CompleteDBDeck","amountOfParCards","reducer","state","action","type","deck","i","addCardsToDeck","cardsFromDB","addToCompleteDBDeck","updateAmountOfCards","flippedOneCard","map","card","id","cardSelected","flippCard","flipSelectedCardUp","flipBackDown","selectedCards","some","selectedCard","flipSelectedCardDown","allCardsFlippedUP","smashCard","flipAllCardsUp","allCardsFlippedDOWN","flipAllCardsDown","getCards","a","axios","response","data","cardsArray","useSmashBarPower","dispatch","useState","powerProcent","ActivatePower","ShowPowerButton","SmashBarPower","setSmashBarPower","useEffect","length","value","smashBar","addedSmashProcent","updateSmashBarProcent","setTimeout","BackCard","onCardClick","onClick","className","style","backgroundImage","FrontCard","cardValue","Card","selectedCardsState","cardInfo","setSelectedCards","pv","CardDeck","cardsHook","selectCardHook","rowColumn","row","column","setRowColumn","useGridCardPostion","gridTemplateColumns","gridTemplateRows","EndGameInput","userInfoState","userInfo","setUserInfo","alert","setAlert","createPortal","placeholder","border","onChange","e","name","target","post","score","date","time","window","location","reload","document","body","SmashBar","width","src","alt","SmashButton","SmashBarContainer","smashBarState","Timer","GamePlayBox","useReducer","error","setError","Error","fetchCards","cardDeckHasBeenFilled","thereIsMoreCardsOnDeck","foundAllMatchedCards","every","smashCardsFalse","useCards","resetSelectedCards","resetTimer","useSelectedCards","endGame","setEndGame","timer","setTimer","maxCardReached","allCardsFlipped","useTimer","format","Date","useUserInfo","StartButton","setStartGame","GameMainComponent","startGame","HomePage","Menu","navigate","useNavigate","getRankingList","rankingResponse","rankingList","PlayerBox","playerInfo","ranking","colorOfRanking","setColorOfRanking","color","RankingList","setRankingList","undefined","rankingArray","fetchRanking","useRankingList","player","index","RankingPage","App","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6355e907.chunk.js","sourcesContent":["import {\r\n  addCardsToDeck,\r\n  addToCompleteDBDeck,\r\n  flipAllCardsDown,\r\n  flipAllCardsUp,\r\n  flipSelectedCardUp,\r\n  flipSelectedCardDown,\r\n  updateAmountOfCards,\r\n} from \"./cardsReducerFunctions\";\r\nimport { Action, Commands, InitialStateType } from \"./cardsReducerType\";\r\n\r\nconst COMMANDS: Commands = {\r\n  Add_Cards_To_Deck: \"add more cards to cardDeck\",\r\n  Add_to_DB_Deck: \"add cards to FullCardDeck\",\r\n  Update_Amount_of_ParCards:\r\n    \"add more par cards by increasing amount of par cards\",\r\n  Flipp_Card_UP: \"flipp clicked card up\",\r\n  Reset_DeckOfCards: \"reset cardDeck\",\r\n  Flip_Selected_Cards_Down: \"flip selected cards down because they didnt match\",\r\n  Flip_AllCards_Up: \"flipp all cards up when smashBar is filled\",\r\n  Flip_AllCards_Down: \"Flipp all cards down after 1second\",\r\n};\r\nconst initialState: InitialStateType = {\r\n  cardDeck: [],\r\n  CompleteDBDeck: [],\r\n  amountOfParCards: 2,\r\n};\r\n\r\nconst reducer = (state: InitialStateType, action: Action) => {\r\n  switch (action.type) {\r\n    case COMMANDS.Add_Cards_To_Deck:\r\n      return addCardsToDeck(state);\r\n    case COMMANDS.Add_to_DB_Deck:\r\n      return addToCompleteDBDeck(state, action);\r\n    case COMMANDS.Update_Amount_of_ParCards:\r\n      return updateAmountOfCards(state);\r\n    case COMMANDS.Flipp_Card_UP:\r\n      return flipSelectedCardUp(state, action);\r\n    case COMMANDS.Flip_Selected_Cards_Down:\r\n      return flipSelectedCardDown(state, action);\r\n    case COMMANDS.Flip_AllCards_Up:\r\n      return flipAllCardsUp(state);\r\n    case COMMANDS.Flip_AllCards_Down:\r\n      return flipAllCardsDown(state);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport { COMMANDS, initialState, reducer };\r\n","import { CardsAPI } from \"../../../service/cards/CardsAPI\";\r\nimport { Action, InitialStateType } from \"./cardsReducerType\";\r\n\r\nconst updateAmountOfCards = (state: InitialStateType) => ({\r\n  ...state,\r\n  amountOfParCards: state.amountOfParCards + 2,\r\n});\r\n\r\nconst addToCompleteDBDeck = (state: InitialStateType, action: Action) => ({\r\n  ...state,\r\n  CompleteDBDeck: action.cardsFromDB ?? [],\r\n});\r\n\r\nconst flipSelectedCardUp = (state: InitialStateType, action: Action) => {\r\n  const flippedOneCard = state.cardDeck.map((card) => {\r\n    if (card.id === action.cardSelected?.id) card.flippCard = true;\r\n    return card;\r\n  });\r\n  return { ...state, cardDeck: flippedOneCard };\r\n};\r\n\r\nconst flipSelectedCardDown = (state: InitialStateType, action: Action) => {\r\n  const flipBackDown = state.cardDeck.map((card) => {\r\n    if (\r\n      action.selectedCards?.some((selectedCard) => selectedCard.id === card.id)\r\n    ) {\r\n      card.flippCard = false;\r\n    }\r\n    return card;\r\n  });\r\n  return { ...state, cardDeck: flipBackDown };\r\n};\r\n\r\nconst addCardsToDeck = (state: InitialStateType) => {\r\n  let deck: CardsAPI[] = [];\r\n  for (let i = 0; i < state.amountOfParCards; i++) {\r\n    deck = [...deck, { ...state.CompleteDBDeck[i] }];\r\n  }\r\n  const addedNewCards = { ...state, cardDeck: deck };\r\n  return addedNewCards;\r\n};\r\n\r\nconst flipAllCardsUp = (state: InitialStateType) => {\r\n  const allCardsFlippedUP = state.cardDeck.map((card) => {\r\n    card.smashCard = true;\r\n    return card;\r\n  });\r\n  return { ...state, cardDeck: allCardsFlippedUP };\r\n};\r\n\r\nconst flipAllCardsDown = (state: InitialStateType) => {\r\n  const allCardsFlippedDOWN = state.cardDeck.map((card) => {\r\n    card.smashCard = false;\r\n    return card;\r\n  });\r\n  return { ...state, cardDeck: allCardsFlippedDOWN };\r\n};\r\n\r\nexport {\r\n  addCardsToDeck,\r\n  flipSelectedCardDown,\r\n  flipSelectedCardUp,\r\n  addToCompleteDBDeck,\r\n  updateAmountOfCards,\r\n  flipAllCardsUp,\r\n  flipAllCardsDown,\r\n};\r\n","import axios from \"axios\";\r\nimport { CardsAPI } from \"./CardsAPI\";\r\n\r\nconst getCards = async (): Promise<CardsAPI[]> => {\r\n  const response = await axios(\"/cards\");\r\n  const cardsArray = await response.data;\r\n  return cardsArray;\r\n};\r\n\r\nexport { getCards };\r\n","import { useEffect,useState } from \"react\";\r\nimport { COMMANDS } from \"../cards/reducer/cardsReducer\";\r\nimport { Action } from \"../cards/reducer/cardsReducerType\";\r\nimport { CardsAPI } from \"../../service/cards/CardsAPI\";\r\n\r\ninterface Props {\r\n  selectedCards: CardsAPI[];\r\n  dispatch: React.Dispatch<Action>;\r\n}\r\nexport interface SmashBarType {\r\n  powerProcent: number;\r\n  ActivatePower: boolean;\r\n  ShowPowerButton: boolean;\r\n}\r\n\r\nconst useSmashBarPower = ({ selectedCards, dispatch }: Props) => {\r\n  const [SmashBarPower, setSmashBarPower] = useState<SmashBarType>({\r\n    powerProcent: 0,\r\n    ActivatePower: false,\r\n    ShowPowerButton: false,\r\n  });\r\n\r\n  useEffect(() => {\r\n    const maxPowerProcent: number = 100;\r\n    \r\n    const updateSmashBarProcent = (smashBar: SmashBarType) => {\r\n      const addedSmashProcent: number = smashBar.powerProcent + 10;\r\n      if (addedSmashProcent >= maxPowerProcent) {\r\n        return {\r\n          ...smashBar,\r\n          powerProcent: maxPowerProcent,\r\n          ShowPowerButton: true,\r\n        };\r\n      } else {\r\n        return { ...smashBar, powerProcent: addedSmashProcent };\r\n      }\r\n    };\r\n    if (selectedCards.length === 2) {\r\n      if (selectedCards[0].value === selectedCards[1].value) {\r\n        setSmashBarPower((smashBar) => updateSmashBarProcent(smashBar));\r\n      }\r\n    }\r\n  }, [selectedCards]);\r\n\r\n  useEffect(() => {\r\n    const flipAllCardsDown = () => {\r\n      dispatch({ type: COMMANDS.Flip_AllCards_Down });\r\n    };\r\n    const resetAllSmashBarProperties = () => ({\r\n      ActivatePower: false,\r\n      ShowPowerButton: false,\r\n      powerProcent: 0,\r\n    });\r\n\r\n    if (SmashBarPower.ActivatePower) {\r\n      dispatch({ type: COMMANDS.Flip_AllCards_Up });\r\n      setTimeout(flipAllCardsDown, 1000);\r\n      setSmashBarPower(resetAllSmashBarProperties());\r\n    }\r\n  }, [SmashBarPower, dispatch, setSmashBarPower]);\r\n\r\n  return { SmashBarPower, setSmashBarPower };\r\n};\r\n\r\nexport { useSmashBarPower };\r\n","interface BackCardProps {\r\n  onCardClick: () => void;\r\n}\r\n\r\nconst BackCard: React.FC<BackCardProps> = ({ onCardClick }) => {\r\n  return (\r\n    <div\r\n      onClick={() => onCardClick()}\r\n      className={`cardComponent backCard animate__animated animate__fadeIn`}\r\n      style={{ backgroundImage: `url(\"/img/goldenflower.jpg\")` }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default BackCard;\r\n","const FrontCard: React.FC<{ cardValue: number }> = ({ cardValue }) => (\r\n  <div className={`animate__animated animate__fadeIn cardComponent frontCard`}>\r\n    <span> {cardValue}</span>\r\n  </div>\r\n);\r\n\r\nexport default FrontCard;\r\n","import React from \"react\";\r\nimport BackCard from \"./BackCard\";\r\nimport FrontCard from \"./FrontCards\";\r\nimport { CardsAPI } from \"../../../service/cards/CardsAPI\";\r\nimport { Action } from \"../reducer/cardsReducerType\";\r\nimport { COMMANDS } from \"../reducer/cardsReducer\";\r\n\r\ninterface Props {\r\n  cardInfo: CardsAPI;\r\n  selectedCardsState: [\r\n    CardsAPI[],\r\n    React.Dispatch<React.SetStateAction<CardsAPI[]>>\r\n  ];\r\n  dispatch: React.Dispatch<Action>;\r\n}\r\n\r\nconst Card: React.FC<Props> = ({ selectedCardsState, cardInfo, dispatch }) => {\r\n  const [selectedCards, setSelectedCards] = selectedCardsState;\r\n\r\n  const onCardClick = () => {\r\n    if (selectedCards.length < 2) {\r\n      dispatch({ type: COMMANDS.Flipp_Card_UP, cardSelected: cardInfo });\r\n      setSelectedCards((pv) => [...pv, cardInfo]);\r\n    }\r\n  };\r\n\r\n  if (cardInfo.flippCard || cardInfo.smashCard) {\r\n    return <FrontCard cardValue={cardInfo.value} />;\r\n  } else {\r\n    return <BackCard onCardClick={onCardClick} />;\r\n  }\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport { Action } from \"../reducer/cardsReducerType\";\r\nimport { CardsAPI } from \"../../../service/cards/CardsAPI\";\r\nimport Card from \"./Card\";\r\nimport { useGridCardPostion } from \"../hooks/useCardGridPosition\";\r\n\r\ninterface Props {\r\n  cardsHook: [CardsAPI[], React.Dispatch<Action>];\r\n  selectCardHook: [\r\n    CardsAPI[],\r\n    React.Dispatch<React.SetStateAction<CardsAPI[]>>\r\n  ];\r\n}\r\n\r\nconst CardDeck: React.FC<Props> = ({ cardsHook, selectCardHook }) => {\r\n  const [cardDeck, dispatch] = cardsHook;\r\n  const [selectedCards, setSelectedCards] = selectCardHook;\r\n  const { rowColumn } = useGridCardPostion({ cardDeck });\r\n\r\n  return (\r\n    <div\r\n      id=\"gameMain-grid\"\r\n      style={{\r\n        gridTemplateColumns: rowColumn.column,\r\n        gridTemplateRows: rowColumn.row,\r\n      }}\r\n    >\r\n      {cardDeck.map((cardInfo) => (\r\n        <Card\r\n          key={cardInfo.id}\r\n          selectedCardsState={[selectedCards, setSelectedCards]}\r\n          cardInfo={cardInfo}\r\n          dispatch={dispatch}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardDeck;\r\n","import { useEffect, useState } from \"react\";\r\nimport { CardsAPI } from \"../../../service/cards/CardsAPI\";\r\n\r\ninterface Props {\r\n  cardDeck: CardsAPI[];\r\n}\r\n\r\nconst useGridCardPostion = ({ cardDeck }: Props) => {\r\n  const [rowColumn, setRowColumn] = useState<{ row: string; column: string }>({\r\n    row: \"60vh\",\r\n    column: \"18vw 18vw\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    switch (cardDeck.length) {\r\n      case 4:\r\n        setRowColumn({ row: \"60vh\", column: \"18vw 18vw 18vw 18vw\" });\r\n        break;\r\n      case 6:\r\n        setRowColumn({ row: \"56vh\", column: \"15vw 15vw 15vw 15vw 15vw 15vw\" });\r\n        break;\r\n      case 8:\r\n        setRowColumn({ row: \"37vh 37vh\", column: \"15vw 15vw 15vw 15vw\" });\r\n        break;\r\n      case 10:\r\n        setRowColumn({ row: \"37vh 37vh\", column: \"15vw 15vw 15vw 15vw 15vw\" });\r\n        break;\r\n      case 12:\r\n        setRowColumn({\r\n          row: \"37vh 37vh\",\r\n          column: \"15vw 15vw 15vw 15vw 15vw 15vw\",\r\n        });\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }, [cardDeck]);\r\n\r\n  return { rowColumn };\r\n};\r\n\r\nexport { useGridCardPostion };\r\n","import React, { useState } from \"react\";\r\nimport { createPortal } from \"react-dom\";\r\nimport { userInfoType } from \"../../common/hooks/useUserInfo\";\r\nimport \"../../css/main.css\";\r\nimport axios from \"axios\";\r\n\r\ninterface Props {\r\n  userInfoState: [\r\n    userInfoType,\r\n    React.Dispatch<React.SetStateAction<userInfoType>>\r\n  ];\r\n}\r\n\r\nconst EndGameInput: React.FC<Props> = ({ userInfoState }) => {\r\n  const [userInfo, setUserInfo] = userInfoState;\r\n  const [alert, setAlert] = useState<string>(\"\");\r\n\r\n  const sendUserInfo = () => {\r\n    if (!userInfo.name) {\r\n      setAlert(\"red\");\r\n    } else {\r\n      axios.post(\"/ranking\", {\r\n        name: userInfo.name,\r\n        score: userInfo.score,\r\n        date: userInfo.date,\r\n        time:userInfo.time\r\n      });\r\n      window.location.reload();\r\n    }\r\n  };\r\n\r\n  return createPortal(\r\n    <div id=\"EndGameInput\">\r\n      <div id=\"endGameBox\">\r\n        <span id=\"endGameTitle\">Submit Score</span>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Insert Name\"\r\n          style={{ border: `3px solid ${alert}` }}\r\n          onChange={(e) => {\r\n            setAlert(\"black\");\r\n            setUserInfo((pv) => ({ ...pv, name: e.target.value }));\r\n          }}\r\n        />\r\n        <div id=\"endGameButtonsBox\">\r\n          <span onClick={sendUserInfo}>Submit</span>\r\n          <span onClick={() => window.location.reload()}>Exit</span>\r\n        </div>\r\n      </div>\r\n    </div>,\r\n    document.body\r\n  );\r\n};\r\n\r\nexport default EndGameInput;\r\n","interface SmashBarProps {\r\n  powerProcent: number;\r\n}\r\n\r\nconst SmashBar: React.FC<SmashBarProps> = ({ powerProcent }) => {\r\n  return (\r\n    <div id=\"SmashBar\" className=\"animate__animated animate__fadeIn\">\r\n      <div id=\"SmashBarPoints\" style={{ width: `${powerProcent}%` }}>\r\n        <img\r\n          src=\"https://media.giphy.com/media/cl8m95jRTEDZdGHMtc/giphy.gif\"\r\n          alt=\"animated loading bar gif\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SmashBar;\r\n","import { SmashBarType } from \"../useSmashBarPower\";\r\n\r\ninterface SmashButtonProps {\r\n  setSmashBarPower: React.Dispatch<React.SetStateAction<SmashBarType>>;\r\n}\r\nconst SmashButton: React.FC<SmashButtonProps> = ({ setSmashBarPower }) => {\r\n  return (\r\n    <div\r\n      id=\"SmashButton\"\r\n      className=\"animate__animated animate__zoomIn\"\r\n      onClick={() => setSmashBarPower((pv) => ({ ...pv, ActivatePower: true }))}\r\n    >\r\n      Smash\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SmashButton;\r\n","import React from \"react\";\r\nimport { SmashBarType } from \"../useSmashBarPower\";\r\nimport SmashBar from \"./SmashBar\";\r\nimport SmashButton from \"./SmashButton\";\r\n\r\ninterface Props {\r\n  smashBarState: [\r\n    SmashBarType,\r\n    React.Dispatch<React.SetStateAction<SmashBarType>>\r\n  ];\r\n}\r\nconst SmashBarContainer: React.FC<Props> = ({ smashBarState }) => {\r\n  const [SmashBarPower, setSmashBarPower] = smashBarState;\r\n\r\n  return (\r\n    <div id=\"SmashBarBox\">\r\n      <SmashBar powerProcent={SmashBarPower.powerProcent} />\r\n      {SmashBarPower.ShowPowerButton ? (\r\n        <SmashButton setSmashBarPower={setSmashBarPower} />\r\n      ) : (\r\n        \"\"\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SmashBarContainer;\r\n","import React from \"react\";\r\n\r\ninterface Props {\r\n  Timer: number;\r\n}\r\nconst Timer: React.FC<Props> = ({ Timer }) => {\r\n  return (\r\n    <div id=\"timer\" className=\"animate__animated animate__slideInDown\">\r\n      {Timer}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Timer;\r\n","import React from \"react\";\r\nimport { useCards } from \"./cards/hooks/useCards\";\r\nimport { useSelectedCards } from \"./cards/hooks/useSelectedCards\";\r\nimport { useSmashBarPower } from \"./smashBar/useSmashBarPower\";\r\nimport { useTimer } from \"./timer/useTimer\";\r\nimport { useUserInfo } from \"../common/hooks/useUserInfo\";\r\nimport CardDeck from \"./cards/components/CardDeck\";\r\nimport EndGameInput from \"./endGame/EndGameInput\";\r\nimport SmashBarContainer from \"./smashBar/components/SmashBarContainer\";\r\nimport Timer from \"./timer/Timer\";\r\n\r\nconst GamePlayBox: React.FC = () => {\r\n  const { cardDeck, dispatch } = useCards();\r\n  const { selectedCards, setSelectedCards } = useSelectedCards({ dispatch });\r\n  const { SmashBarPower, setSmashBarPower } = useSmashBarPower({\r\n    selectedCards,\r\n    dispatch,\r\n  });\r\n  const { timer, endGame } = useTimer(cardDeck);\r\n  const { userInfo, setUserInfo } = useUserInfo({\r\n    selectedCards, timer\r\n  });\r\n\r\n  return (\r\n    <div id=\"mainGameContainer\">\r\n      <Timer Timer={timer} />\r\n      <CardDeck\r\n        cardsHook={[cardDeck, dispatch]}\r\n        selectCardHook={[selectedCards, setSelectedCards]}\r\n      />\r\n      <SmashBarContainer smashBarState={[SmashBarPower, setSmashBarPower]} />\r\n      {endGame ? (\r\n        <EndGameInput userInfoState={[userInfo, setUserInfo]} />\r\n      ) : (\r\n        \"\"\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GamePlayBox;\r\n","import { useEffect, useReducer, useState } from \"react\";\r\nimport { COMMANDS, initialState, reducer } from \"../reducer/cardsReducer\";\r\nimport { getCards } from \"../../../service/cards/CardsService\";\r\n\r\nconst useCards = () => {\r\n  const [{ cardDeck }, dispatch] = useReducer(reducer, initialState);\r\n  const [error, setError] = useState<Error>();\r\n\r\n  useEffect(() => {\r\n    const fetchCards = async () => {\r\n      try {\r\n        const cardsArray = await getCards();\r\n        if (!cardsArray) {\r\n          throw new Error(\"cardsArray is undefined\");\r\n        }\r\n        dispatch({ type: COMMANDS.Add_to_DB_Deck, cardsFromDB: cardsArray });\r\n        dispatch({ type: COMMANDS.Add_Cards_To_Deck });\r\n      } catch (error) {\r\n        setError(error);\r\n      }\r\n    };\r\n    fetchCards();\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    const addMoreCardsToDeck = () => {\r\n      const waitForAnimationToFlipDown = () => {\r\n        dispatch({ type: COMMANDS.Update_Amount_of_ParCards });\r\n        dispatch({ type: COMMANDS.Add_Cards_To_Deck });\r\n      };\r\n      setTimeout(waitForAnimationToFlipDown, 1050);\r\n    };\r\n\r\n    const cardDeckHasBeenFilled = cardDeck.length > 1;\r\n    const thereIsMoreCardsOnDeck = cardDeck.length < 10;\r\n    const foundAllMatchedCards = cardDeck.every((card) => card.flippCard);\r\n    const smashCardsFalse = cardDeck.every((card) => !card.smashCard);\r\n\r\n    if (\r\n      foundAllMatchedCards &&\r\n      cardDeckHasBeenFilled &&\r\n      thereIsMoreCardsOnDeck &&\r\n      smashCardsFalse\r\n    ) {\r\n      addMoreCardsToDeck();\r\n    }\r\n  }, [cardDeck, dispatch]);\r\n\r\n  return { cardDeck, dispatch, error };\r\n};\r\n\r\nexport { useCards };\r\n","import { useState, useEffect } from \"react\";\r\nimport { COMMANDS } from \"../reducer/cardsReducer\";\r\nimport { Action } from \"../reducer/cardsReducerType\";\r\nimport { CardsAPI } from \"../../../service/cards/CardsAPI\";\r\n\r\ninterface Props {\r\n  dispatch: React.Dispatch<Action>;\r\n}\r\n\r\nconst useSelectedCards = ({ dispatch }: Props) => {\r\n  const [selectedCards, setSelectedCards] = useState<CardsAPI[]>([]);\r\n\r\n  useEffect(() => {\r\n    const resetSelectedCards = (resetTimer: number) => {\r\n      const waitForAnimationToFlipDown = () => setSelectedCards([]);\r\n      setTimeout(waitForAnimationToFlipDown, resetTimer);\r\n    };\r\n    const flipCardsFaceDown = () => {\r\n      dispatch({\r\n        type: COMMANDS.Flip_Selected_Cards_Down,\r\n        selectedCards: selectedCards,\r\n      });\r\n    };\r\n\r\n    if (selectedCards.length === 2) {\r\n      if (selectedCards[0].value === selectedCards[1].value) {\r\n        resetSelectedCards(550);\r\n      } else if (selectedCards[0].value !== selectedCards[1].value) {\r\n        resetSelectedCards(1000);\r\n        setTimeout(flipCardsFaceDown, 950);\r\n      }\r\n    }\r\n  }, [selectedCards, dispatch]);\r\n\r\n  return { selectedCards, setSelectedCards };\r\n};\r\n\r\nexport { useSelectedCards };\r\n","import { useEffect, useState } from \"react\";\r\nimport { CardsAPI } from \"../../service/cards/CardsAPI\";\r\n\r\nconst useTimer = (cardDeck: CardsAPI[]) => {\r\n  const [endGame, setEndGame] = useState<boolean>(false);\r\n  const [timer, setTimer] = useState(500);\r\n\r\n  useEffect(() => {\r\n    if(!endGame){\r\n      timer > 0 && setTimeout(() => setTimer(timer - 1), 1000);\r\n    }\r\n\r\n    const maxCardReached = cardDeck.length === 10;\r\n    const allCardsFlipped = cardDeck.every((card) => card.flippCard);\r\n\r\n    if (maxCardReached && allCardsFlipped) {\r\n      setEndGame(true);\r\n    } else if (timer === 0) {\r\n      setEndGame(true);\r\n    }\r\n  }, [timer, cardDeck, endGame]);\r\n\r\n  return { timer, endGame };\r\n};\r\n\r\nexport { useTimer };\r\n","import { format } from \"date-fns\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { CardsAPI } from \"../../service/cards/CardsAPI\";\r\n\r\nexport interface userInfoType {\r\n  score: number;\r\n  name: string;\r\n  date: string;\r\n  time:number;\r\n}\r\ninterface Props {\r\n  selectedCards: CardsAPI[];\r\n  timer:number\r\n}\r\n\r\nconst useUserInfo = ({ selectedCards, timer }: Props) => {\r\n  const [userInfo, setUserInfo] = useState<userInfoType>({\r\n    score: 0,\r\n    name: \"\",\r\n    date: format(new Date(), \"yyyy-MM-dd\"),\r\n    time:0\r\n  });\r\n\r\n  useEffect(() => {\r\n    setUserInfo(pv => ({...pv, time:timer}))\r\n  }, [timer])\r\n\r\n  useEffect(() => {\r\n    if (selectedCards.length === 2) {\r\n      if (selectedCards[0].value === selectedCards[1].value) {\r\n        setUserInfo((pv) => ({ ...pv, score: pv.score + 1 }));\r\n      }\r\n    }\r\n  }, [selectedCards]);\r\n\r\n  return { userInfo, setUserInfo };\r\n};\r\n\r\nexport { useUserInfo };\r\n","import React from \"react\";\r\ninterface Props {\r\n  setStartGame: React.Dispatch<React.SetStateAction<boolean>>;\r\n}\r\n\r\nconst StartButton: React.FC<Props> = ({ setStartGame }) => {\r\n  return (\r\n    <div\r\n      id=\"startButton\"\r\n      className=\"animate__animated animate__fadeIn\"\r\n      onClick={() => setStartGame(true)}\r\n    >\r\n      <span>\r\n        Start\r\n        <br />\r\n        Game\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StartButton;\r\n","import React, { useState } from \"react\";\r\nimport GamePlayBox from \"../gameplay/GamePlayBox\";\r\nimport StartButton from \"./StartButton\";\r\n\r\nconst GameMainComponent: React.FC = () => {\r\n  const [startGame, setStartGame] = useState<boolean>(false);\r\n\r\n  if (startGame) {\r\n    return <GamePlayBox />;\r\n  } else {\r\n    return <StartButton setStartGame={setStartGame} />;\r\n  }\r\n};\r\n\r\nexport default GameMainComponent;\r\n","import React from \"react\";\r\nimport GameMainComponent from \"./GameMainComponent\";\r\n\r\nconst HomePage: React.FC = () => {\r\n  return (\r\n    <div id=\"homePage\">\r\n      <GameMainComponent />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n","import React from \"react\";\r\nimport { useNavigate } from \"react-router\";\r\n\r\nconst Menu: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  return (\r\n    <div id=\"menu\">\r\n      <div\r\n        onClick={() => {\r\n          navigate(\"/\");\r\n          window.location.reload();\r\n        }}\r\n        className=\"menuButtons animate__animated animate__fadeIn\"\r\n      >\r\n        Start New Game\r\n      </div>\r\n      <div\r\n        onClick={() => navigate(\"/ranking\")}\r\n        className=\"menuButtons animate__animated animate__fadeIn\"\r\n      >\r\n        Ranking{\" \"}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n","import axios from \"axios\";\r\nimport { RankingAPI } from \"./RankingAPI\";\r\n\r\nconst getRankingList = async (): Promise<RankingAPI[]> => {\r\n  const rankingResponse = await axios(\"/ranking\");\r\n  const rankingList = await rankingResponse.data;\r\n  return rankingList;\r\n};\r\n\r\nexport { getRankingList };\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { RankingAPI } from \"../../service/ranking/RankingAPI\";\r\n\r\ninterface Props {\r\n  playerInfo: RankingAPI;\r\n  ranking: number;\r\n}\r\n\r\nconst PlayerBox: React.FC<Props> = ({ playerInfo, ranking }) => {\r\n  const [colorOfRanking, setColorOfRanking] = useState(\"\");\r\n  useEffect(() => {\r\n    switch (ranking) {\r\n      case 0:\r\n        setColorOfRanking(\"gold\");\r\n        break;\r\n      case 1:\r\n        setColorOfRanking(\"grey\");\r\n        break;\r\n      case 2:\r\n        setColorOfRanking(\"brown\");\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }, [ranking]);\r\n  return (\r\n    <div className=\"player-FlexBox animate__animated animate__fadeIn\">\r\n      <div className=\"playerNameAndDate playerBoxConfig\">\r\n        <span style={{ color: colorOfRanking }}>{playerInfo.name}</span>\r\n        <span>{playerInfo.date}</span>\r\n      </div>\r\n      <div className=\"playerScore playerBoxConfig\">\r\n        <span>Time: {playerInfo.time}</span>\r\n        <span>Score: {playerInfo.score}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlayerBox;\r\n","import React from \"react\";\r\nimport { useRankingList } from \"../hooks/useRankingList\";\r\nimport PlayerBox from \"./PlayerBox\";\r\n\r\nconst RankingList: React.FC = () => {\r\n  const { rankingList } = useRankingList();\r\n\r\n  return (\r\n    <div id=\"RankingList-grid\" className=\"animate__animated animate__fadeIn\">\r\n      <div id=\"RankingTitle\" className=\"animate__animated animate__fadeIn\">\r\n        Ranking\r\n      </div>\r\n      {rankingList.map((player, index) =>\r\n        index < 5 ? (\r\n          <PlayerBox key={index} playerInfo={player} ranking={index} />\r\n        ) : (\r\n          \"\"\r\n        )\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RankingList;\r\n","import { useEffect, useState } from \"react\";\r\nimport { RankingAPI } from \"../../service/ranking/RankingAPI\";\r\nimport { getRankingList } from \"../../service/ranking/RankingService\";\r\n\r\nconst useRankingList = () => {\r\n  const [rankingList, setRankingList] = useState<RankingAPI[]>([]);\r\n  const [error, setError] = useState<Error>();\r\n\r\n  useEffect(() => {\r\n    const fetchRanking = async () => {\r\n      try {\r\n        const rankingArray = await getRankingList();\r\n\r\n        if (rankingArray === undefined) {\r\n          throw new Error(\"could not find RankingArray\");\r\n        }\r\n        setRankingList(rankingArray);\r\n      } catch (err) {\r\n        setError(err);\r\n      }\r\n    };\r\n    fetchRanking();\r\n  }, []);\r\n\r\n  return { rankingList, error };\r\n};\r\nexport { useRankingList };\r\n","import React from \"react\";\r\nimport RankingList from \"./RankingList\";\r\n\r\nconst RankingPage: React.FC = () => {\r\n  return (\r\n    <div\r\n      id=\"RankingPage\"\r\n      className=\"animate__animated animate__fadeIn\"\r\n      style={{ backgroundImage: \"url(img/golden-rose.png)\" }}\r\n    >\r\n      <RankingList />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RankingPage;\r\n","import { BrowserRouter, Routes, Route } from \"react-router-dom\";\r\nimport HomePage from \"./home/HomePage\";\r\nimport Menu from \"./menu/Menu\";\r\nimport RankingPage from \"./ranking/components/RankingPage\";\r\nimport \"animate.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <BrowserRouter>\r\n      <Menu />\r\n      <Routes>\r\n        <Route path=\"/\" element={<HomePage />} />\r\n        <Route path=\"ranking\" element={<RankingPage />} />\r\n      </Routes>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from \"web-vitals\";\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport \"./css/main.css\";\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}